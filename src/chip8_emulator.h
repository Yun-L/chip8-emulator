#include <cstdint> // fixed int size types
#include <cstdlib> // rand
	
typedef struct cpu {
	uint8_t registers[16];
	uint8_t stack_p;
	uint8_t delay_timer;
	uint8_t sound_timer;
	uint16_t index;
	uint16_t pc;
	uint16_t stack[64] = {0};
	bool display[2048] = {0}; // 64 x 32 bits, 8 x 32 uint8_t's
	uint8_t ram[4096] = {
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80, // F
		// the rest should be 0 initialized
	};
} cpu;

enum class keyState {
	IDLE,
	PRESSED,
	RELEASED
		// for the instruction Fx0A, we only count a key as pressed if it was
		// pressed, then released.
};

typedef struct systemState {
	bool quit;
	keyState keyStates[16];
	// here we represent each key by using its value as the index in this array.
	// this means that the order in the array doesn't match the order of the
	// actual physical key layout.
	// 1 2 3 C
	// 4 5 6 D
	// 7 8 9 E
	// A 0 B F
} systemState;

bool runInstruction(uint16_t instruction, systemState *state, cpu *ch8Cpu);


